(()=>{"use strict";class e extends EventTarget{constructor(e){super();for(const t of e)this.init(t)}init(e){Object.defineProperty(this,`on${e}`,{set(t){this.on(e,t)}})}on(e,t){this.addEventListener(e,t)}emit(e,t){this.dispatchEvent(new CustomEvent(e,{detail:t}))}}const t=e;class s extends WebSocket{constructor(e){super(e.url),this.id=e.id,this.addEventListener("open",(()=>{this.send(JSON.stringify({url:"socket",body:{event:"connect",id:this.id}}))}))}}const n=s,i=Array.from(Array(8),(()=>Math.floor(16*Math.random()).toString(16))).join(""),o=document.querySelector(".text-user-id"),r=document.querySelector(".text-room-id"),a=document.querySelector(".input-room-id"),d=document.querySelector(".open"),c=document.querySelector(".rooms");o.innerHTML=i,r.innerHTML=Array.from(Array(8),(()=>Math.floor(16*Math.random()).toString(16))).join("");const h=new n({id:i,url:"ws://127.0.0.1:8000"}),l=new class extends t{constructor(e){super(["open","message","close"]),this.id=e.id,this.peerConnections={},this.dataChannels={}}async createOffer(e){this.peerConnections[e]=new RTCPeerConnection,this.dataChannels[e]=await this.peerConnections[e].createDataChannel(e),this.setupPeerConnection(e),this.setupDataChannel(e);const t=await this.peerConnections[e].createOffer();return await this.peerConnections[e].setLocalDescription(t),await new Promise(((t,s)=>{this.peerConnections[e].onicecandidate=s=>{t(this.peerConnections[e].localDescription)}}))}async createAnswer(e,t){this.peerConnections[e]=new RTCPeerConnection,this.peerConnections[e].addEventListener("datachannel",(t=>{this.dataChannels[e]=t.channel,this.setupDataChannel(e)})),this.setupPeerConnection(e),await this.peerConnections[e].setRemoteDescription(t);const s=await this.peerConnections[e].createAnswer();return await this.peerConnections[e].setLocalDescription(s),s}async setAnswer(e,t){await this.peerConnections[e].setRemoteDescription(t)}setupPeerConnection(e){this.peerConnections[e].addEventListener("connectionstatechange",(t=>{"disconnected"!=t.target.connectionState&&"failed"!=t.target.connectionState||this.close(e)}))}setupDataChannel(e){this.dataChannels[e].addEventListener("open",(t=>{this.emit("open",[e,t])})),this.dataChannels[e].addEventListener("message",(t=>{this.emit("message",[e,t])}))}close(e){this.peerConnections[e]&&(this.dataChannels[e].close(),this.peerConnections[e].close(),delete this.dataChannels[e],delete this.peerConnections[e])}send(e,t){this.dataChannels[e].send(JSON.stringify(t))}}({id:i}),p=new class{constructor(e){this.socket=e.socket,this.peer=e.peer,this.socket.addEventListener("open",(()=>{this.socket.addEventListener("message",(async e=>{const t=JSON.parse(e.data);if("signaling"==t.url&&"sdp"==t.body.event)if("offer"==t.body.sdp.type){const e=await this.peer.createAnswer(t.body.id,t.body.sdp);this.socket.send(JSON.stringify({url:"signaling",body:{event:"sdp",id:t.body.id,sdp:e}}))}else"answer"==t.body.sdp.type&&await this.peer.setAnswer(t.body.id,t.body.sdp)}))}))}async open(e){const t=await this.peer.createOffer(e);this.socket.send(JSON.stringify({url:"signaling",body:{event:"sdp",id:e,sdp:t}}))}close(e){this.peer.close(e)}}({socket:h,peer:l}),m=new class extends t{constructor(e){super(["open","add","delete"]),this.socket=e.socket,this.rooms={},this.socket.addEventListener("open",(()=>{this.socket.addEventListener("message",(async e=>{const t=JSON.parse(e.data);"room"==t.url&&("open"==t.body.event?this.rooms[t.body.rid]=new Set(t.body.ids):"add"==t.body.event?this.rooms[t.body.rid].add(t.body.id):"delete"==t.body.event&&this.rooms[t.body.rid].delete(t.body.id),this.emit(t.body.event,[t.body]))}))}))}open(e){this.socket.send(JSON.stringify({url:"room",body:{event:"open",rid:e}}))}close(e){delete this.rooms[e],this.socket.send(JSON.stringify({url:"room",body:{event:"delete",rid:e}}))}}({socket:h}),u=new class{constructor(e){this.room=e.room,this.signalpeer=e.signalpeer,this.peers={},this.room.addEventListener("open",(e=>{const[t]=e.detail;for(const e of t.ids)this.signalpeer.peer.peerConnections[e]||(this.signalpeer.open(e),this.peers[e]=new Set),this.peers[e].add(t.rid)})),this.room.addEventListener("add",(e=>{const[t]=e.detail;this.signalpeer.peer.peerConnections[t.id]||(this.peers[t.id]=new Set),this.peers[t.id].add(t.rid)})),this.room.addEventListener("delete",(e=>{const[t]=e.detail;this.peers[t.id].delete(t.rid),0==this.peers[t.id].size&&this.signalpeer.close(t.id)}))}broadcast(e,t){for(const s of this.room.rooms[e])this.signalpeer.peer.send(s,t)}}({room:m,signalpeer:p});r.addEventListener("click",(()=>{r.innerHTML=Array.from(Array(8),(()=>Math.floor(16*Math.random()).toString(16))).join("")})),d.addEventListener("click",(()=>{m.open(a.value);const e=document.createElement("div");e.className=a.value;const t=document.createElement("div");t.className="text-room-id",t.innerHTML=a.value;const s=document.createElement("input");s.className="input-message",s.addEventListener("input",(()=>{u.broadcast(e.className,{event:"input",rid:e.className,text:s.value})}));const n=document.createElement("button");n.className="close",n.innerHTML="close",n.addEventListener("click",(()=>{m.close(e.className),c.removeChild(e)})),e.appendChild(t),e.appendChild(s),e.appendChild(n),c.appendChild(e)})),l.onmessage=e=>{const[t,s]=e.detail,n=JSON.parse(s.data);"input"==n.event&&(c.querySelector(`.${n.rid}`).querySelector(".input-message").value=n.text)}})();